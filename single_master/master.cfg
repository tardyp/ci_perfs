# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from textwrap import dedent
from buildbot.util import now

NUM_WORKERS = 10
NUMLINES = 200000
SLEEP = 0
NUMBUILDS = 30

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [
    worker.DockerLatentWorker('docker%03d' % (i,), 'password',
                              docker_host='unix://var/run/docker.sock',
                              image='buildbot/buildbot-worker',
                              masterFQDN='172.17.0.1',
                              build_wait_timeout=100)
    for i in range(NUM_WORKERS)]
workernames = ['docker%03d' % (i,) for i in range(NUM_WORKERS)]
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.Triggerable(name="flood", builderNames=["flood"]))
c['schedulers'].append(schedulers.Triggerable(name="trigger", builderNames=["trigger"]))
c['schedulers'].append(schedulers.ForceScheduler(
                       name="force",
                       builderNames=["compute"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
c['builders'] = []

factory = util.BuildFactory()
factory.addStep(steps.ShellCommand(command=["python", "-c", util.Interpolate(dedent("""
        import uuid
        import time
        for i in xrange(%(prop:NUMLINES:-3000)s):
            time.sleep(%(prop:SLEEP:-0)s)
            print (str(uuid.uuid4())+str(uuid.uuid4())+str(uuid.uuid4()))*4
        """))]))

c['builders'].append(
    util.BuilderConfig(name="flood",
      workernames=workernames,
      factory=factory))

factory = util.BuildFactory()
class MyTrigger(steps.Trigger):
    def __init__(self):
        steps.Trigger.__init__(self, schedulerNames=['flood'],
                               waitForFinish=True)

    def getSchedulersAndProperties(self):
        return [
            {
                'sched_name': 'flood', 'props_to_set': {'NUMLINES': NUMLINES, 'SLEEP': SLEEP},
                'unimportant': False}
            for i in range(NUMBUILDS)
        ]

factory.addStep(MyTrigger())
c['builders'].append(
    util.BuilderConfig(name="trigger",
      workernames=workernames,
      factory=factory))

factory = util.BuildFactory()
factory.addStep(steps.Trigger(schedulerNames=['trigger'], waitForFinish=True))


class Compute(steps.BuildStep):
    name="compute lines of log per sec"
    def getResultSummary(self):
        dur = now() - self.build.build_status.started
        res = u"{} lines of log / sec".format(NUMLINES * NUMBUILDS / dur)
        return {'step': res, 'build': res}

    def run(self):
        return 0

factory.addStep(Compute())
c['builders'].append(
    util.BuilderConfig(name="compute",
      workernames=workernames,
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "CIPERF"
c['titleURL'] = "http://github.com/tardyp/ci_perfs"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(profiler={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.

    'db_url' : "postgresql+psycopg2://postgres:example@localhost/postgres",
}

c['buildbotNetUsageData'] = None
c['logCompressionMethod'] = 'lz4'
