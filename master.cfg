# -*- python -*-
# ex: set filetype=python:

import os
from textwrap import dedent

from buildbot.plugins import schedulers, steps, util

try:
    from buildbot.plugins import worker
    hasNine = True
except ImportError:
    hasNine = False
    from buildbot.plugins import buildslave

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# ###### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

numWorkers = os.environ.get("NUM_WORKER", 200)
workersnames = ['worker' + str(i) for i in xrange(numWorkers)]

if hasNine:
    c['workers'] = [
        worker.Worker(workersnames[i], 'pass') for i in xrange(numWorkers)
    ]
else:
    c['slaves'] = [
        buildslave.BuildSlave(workersnames[i], 'pass') for i in xrange(numWorkers)
    ]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type': 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel': 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}


# ###### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.ForceScheduler(
                       name="force",
                       builderNames=["runtests" + str(i) for i in range(numWorkers)],
                       properties=[util.StringParameter("NUMLINES"),
                                   util.StringParameter("SLEEP")]))

# ###### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
factory.addStep(steps.ShellCommand(command=["python", "-c", util.Interpolate(dedent("""
        import uuid
        import time
        for i in xrange(%(prop:NUMLINES:-3000)s):
            time.sleep(%(prop:SLEEP:-0)s)
            print (str(uuid.uuid4())+str(uuid.uuid4())+str(uuid.uuid4()))*4
        """))]))

c['builders'] = []
if hasNine:
    kwargs = dict(collapseRequests=False, workernames=workersnames[:i])
else:
    kwargs = dict(mergeRequests=False, slavenames=workersnames[:i])

for i in range(numWorkers):
    c['builders'].append(
        util.BuilderConfig(
            name="runtests" + str(i),
            factory=factory, **kwargs))

# ###### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

# ###### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "CI Perfs"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/").format(**os.environ)
port = port = os.environ.get("BUILDBOT_WEB_PORT", 8010)
try:
    import buildbot_profiler
    [buildbot_profiler]
    plugins = dict(profiler=True)
except:
    plugins = {}
# minimalistic config to activate new web UI
if hasNine:
    c['www'] = dict(port=port,
                    plugins=plugins)
else:
    from buildbot.status.web.baseweb import WebStatus
    authz = util.Authz(forceBuild=True, stopBuild=True)
    c['status'].append(WebStatus(port, authz=authz))

# ###### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.environ.get("BUILDBOT_DB_URL", "sqlite:///state.sqlite").format(**os.environ),
}

if hasNine:
    c['buildbotNetUsageData'] = None
c['logCompressionMethod'] = 'gz'
